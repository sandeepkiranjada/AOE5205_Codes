%script_simaircraft05.m
%
%  Copyright (c) 2019 Mark L. Psiaki.  All rights reserved.  
%
%  This Matlab script simulates the motion of an
%  aircraft by using the design and control input
%  data in maneuver02_data.mat
%  and the point-mass translational aircraft
%  dynamics model in ffunctaircraft03.m.
%
%  This script uses N-point Euler numerical
%  integration in order to do the numerical
%  integration.
%
%  This script also makes plots of the flight time history.
%
%  Clear the Matlab workspace.
%
   clear
%
%  Load the aircraft parameters, the thrust, angle-of-attack,
%  and roll/bank-angle input time histories, and the initial
%  state vector.
%
   load maneuver02_data
%
%  Define the aircraft dynamics function handle 
%  in a form that is suitable for input to ode45.m
%  or to an Euler numerical integration.
%
   ffunctode45_03 = @(tdum,xdum) ...
             ffunctaircraft03(tdum,xdum,m,S,CLalpha,CD0,oneoverpiARe,...
                              tinhist,Thist,alphahist,phihist);
%
%  Define the time span of the simulation, computing outputs
%  every half second.
%
   t0 = tinhist(1,1);
   tf = tinhist(end,1);
%
%  Compute the ode45.m results using a very
%  precise relative tolerance.
%
   tspan = (t0:0.5:tf)';
   optionsode45 = odeset('RelTol',1.e-12);
   tic
   [thist03,xhist03] = ode45(ffunctode45_03,tspan,x0,optionsode45);
   timetoode45 = toc
%
%  Set up 3 different N values and prepare to store 3 different
%  time histories generated by Euler integration.
%
   Nvec = [1000;10000;100000];
   thist03_euler_cell = cell(3,1);
   xhist03_euler_cell = cell(3,1);
   timetoeuler_vec = zeros(3,1);
%
%  Select N and perform N steps of Euler numerical integration
%  to go from time tmin to time tmax.
%
   n = size(x0,1);
   for jj = 1:3
      N = Nvec(jj,1)
      deltat = (tf-t0)/N;
      Np1 = N + 1;
      thist03_euler = zeros(Np1,1);
      xhist03_euler = zeros(Np1,n);
      thist03_euler(1,1) = t0;
      xhist03_euler(1,:) = x0';
      clear Np1
      tic
      tkp1 = t0;
      xkp1 = x0;
      for k = 0:(N-1);
         tk = tkp1;
         xk = xkp1;
         fk = ffunctode45_03(tk,xk);
         tkp1 = tk+deltat;
         xkp1 = xk+deltat*fk;
         kp2 = k + 2;
         thist03_euler(kp2,1) = tkp1;
         xhist03_euler(kp2,:) = xkp1';
      end
      clear k tk xk fk tkp1 xkp1 kp2
      timetoeuler = toc
      timetoeuler_vec(jj,1) = timetoeuler;
      thist03_euler_cell{jj,1} = thist03_euler;
      xhist03_euler_cell{jj,1} = xhist03_euler;
   end
   clear jj N deltat thist03_euler xhist03_euler timetoeuler
%
%  Plot the ground track.
%
   figure(1)
   hold off
   plot(xhist03(:,2)*0.001,xhist03(:,1)*0.001,'b-','LineWidth',3)
   hold on
   plot(xhist03_euler_cell{1,1}(:,2)*0.001,...
        xhist03_euler_cell{1,1}(:,1)*0.001,'k:','LineWidth',1.5)
   plot(xhist03_euler_cell{2,1}(:,2)*0.001,...
        xhist03_euler_cell{2,1}(:,1)*0.001,'g--','LineWidth',1.5)
   plot(xhist03_euler_cell{3,1}(:,2)*0.001,...
        xhist03_euler_cell{3,1}(:,1)*0.001,'r-.','LineWidth',1.5)
   hold off
   grid
   axis('equal')
   xlabel('Eastward Displacement (km)')
   ylabel('Northward Displacment (km)')
   title('Ground Tracks for simaircraft05.mat')
   legend('ode45.m',...
          ['Euler integration w/',int2str(Nvec(1,1)),' steps'],...
          ['Euler integration w/',int2str(Nvec(2,1)),' steps'],...
          ['Euler integration w/',int2str(Nvec(3,1)),' steps'])
%
%  Plot the altitude, airspeed, flight-path angle,
%  and heading angle time histories.
%
   figure(2)
   subplot(411)
   hold off
   plot(thist03,-xhist03(:,3),'b-','LineWidth',3)
   hold on
   plot(thist03_euler_cell{1,1},-xhist03_euler_cell{1,1}(:,3),...
        'k:','LineWidth',1.5)
   plot(thist03_euler_cell{2,1},-xhist03_euler_cell{2,1}(:,3),...
        'g--','LineWidth',1.5)
   plot(thist03_euler_cell{3,1},-xhist03_euler_cell{3,1}(:,3),...
        'r-.','LineWidth',1.5)
   hold off
   grid
   ylabel('Altitude above Airport (m)')
   title('State time histories for simaircraft05.mat')
   legend('ode45.m',...
          ['Euler integration w/',int2str(Nvec(1,1)),' steps'],...
          ['Euler integration w/',int2str(Nvec(2,1)),' steps'],...
          ['Euler integration w/',int2str(Nvec(3,1)),' steps'])
   subplot(412)
   hold off
   plot(thist03,xhist03(:,4),'b-','LineWidth',3)
   hold on
   plot(thist03_euler_cell{1,1},xhist03_euler_cell{1,1}(:,4),...
        'k:','LineWidth',1.5)
   plot(thist03_euler_cell{2,1},xhist03_euler_cell{2,1}(:,4),...
        'g--','LineWidth',1.5)
   plot(thist03_euler_cell{3,1},xhist03_euler_cell{3,1}(:,4),...
        'r-.','LineWidth',1.5)
   hold off
   grid
   ylabel('Airspeed (m/sec)')
   subplot(413)
   hold off
   plot(thist03,xhist03(:,5)*(180/pi),'b-','LineWidth',3)
   hold on
   plot(thist03_euler_cell{1,1},...
        xhist03_euler_cell{1,1}(:,5)*(180/pi),'k:','LineWidth',1.5)
   plot(thist03_euler_cell{2,1},...
        xhist03_euler_cell{2,1}(:,5)*(180/pi),'g--','LineWidth',1.5)
   plot(thist03_euler_cell{3,1},...
        xhist03_euler_cell{3,1}(:,5)*(180/pi),'r-.','LineWidth',1.5)
   hold off
   grid
   ylabel('Flight Path Angle (deg)')
   subplot(414)
   hold off
   plot(thist03,xhist03(:,6)*(180/pi),'b-','LineWidth',3)
   hold on
   plot(thist03_euler_cell{1,1},...
        xhist03_euler_cell{1,1}(:,6)*(180/pi),'k:','LineWidth',1.5)
   plot(thist03_euler_cell{2,1},...
        xhist03_euler_cell{2,1}(:,6)*(180/pi),'g--','LineWidth',1.5)
   plot(thist03_euler_cell{3,1},...
        xhist03_euler_cell{3,1}(:,6)*(180/pi),'r-.','LineWidth',1.5)
   hold off
   grid
   ylabel('Heading Angle (deg)')
   xlabel('Time (seconds)')
%
%  Plot the thrust, angle-of-attack, and roll/bank-angle
%  time histories.
%
   figure(3)
   subplot(311)
   hold off
   plot(tinhist,Thist,'LineWidth',1.5)
   grid
   ylabel('Thrust (N)')
   title('Control input time histories for simaircraft05.mat')
   subplot(312)
   hold off
   plot(tinhist,alphahist*(180/pi),'LineWidth',1.5)
   grid
   ylabel('Angle-of-Attack (deg)')
   subplot(313)
   hold off
   plot(tinhist,phihist*(180/pi),'LineWidth',1.5)
   grid
   ylabel('Roll/Bank-Angle (deg)')
   xlabel('Time (seconds)')
%
%  Display final state error.
%
   format long
   errorxfinal_1000 = xhist03_euler_cell{1,1}(end,:)' - xhist03(end,:)'
   errorxfinal_10000 = xhist03_euler_cell{2,1}(end,:)' - xhist03(end,:)'
   errorxfinal_100000 = xhist03_euler_cell{3,1}(end,:)' - xhist03(end,:)'
%
%  Save the results.
%
   textcommands = ['These data have been generated by the',...
                   ' commands in script_simaircraft05.m'];
   save simaircraft05 